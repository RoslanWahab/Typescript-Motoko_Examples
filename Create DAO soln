import Buffer "mo:base/Buffer";

actor createDAO {

    // Task #1:
    // Create an immutable variable 'name' of type 'Text'.
    // Initialize it with your name.


     let daoName: Text = "AL FALAH WEALTH";

    // Task #2:
    // Create a mutable variable 'message' of type 'Text'.
    // Initialize it with the value "Hello World".

    var manifesto: Text = "1) To help the poor so that they can become independent with the help of others 2) To help them get a job or run a small business 3) To educate them with financial and business management knowledge. ";

    // Task #3:
    // Define a query function 'getName'.
    // This function should return the value of the 'name' variable.

  

    public query func getDaoName(): async Text {
        return daoName;
    };


    // Task #4:
    // Define an update function 'setMessage'.
    // This function should update the 'message' variable with the value passed as its argument.

    //Return the manifesto of your DAO


    public query func getManifesto(): async Text {
        return manifesto;
    };

    // Task #5:
    // Define a query function 'getMessage'
    // This function should return the value of the 'message' variable.

    public func addNewManifesto(addNewManifesto: Text): async () {
        manifesto :=  manifesto # addNewManifesto;
    };



    // Task #6:
    // Deploy your application to the Internet Computer.

//Task 6: Define a list of goals for your DAO
//Implement a mutable variable goals of type Buffer<Text> that represents the goals of your DAO.

let buffer = Buffer.Buffer<Text>(2); // Creates a new Buffer with goals

buffer.add("Need volunteers"); // add string text to buffer
buffer.add("Need finance");

Buffer.toArray(buffer) // => ["Need volunteers", "Need finance"]



    // Task #7:
    // Invoke the 'setMessage' function.

    // Task #8:
    // Invoke both 'getName' and 'getMessage' functions.
    // Verify that they return the correct values.
    // Note: Once you execute Task 9, the values will be permanently stored.

    // Task #9:
    // Invoke the 'test' function and await its result.

    // Below section is for inter-canister calls to test your application. Do not modify.
    // let testActor : actor {
    //     testApp : shared (name : Text, message : Text) -> async Text;
    // } = actor ("anj57-7aaaa-aaaaj-qa23a-cai");

    // public func test() : async Text {
    //     let result = await  testActor.testApp(name, message);
    // };
};
